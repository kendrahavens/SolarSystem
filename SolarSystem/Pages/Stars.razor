@page "/stars"
@using System.Xml
@using System.ServiceModel
@using System.ServiceModel.Syndication
@using System.Text.Json

<div style="text-align: center; background:radial-gradient(rgba(0,0,0,1), rgba(0,0,0,0));">

<h1>Upcoming Celestial Events</h1>
<br />

<h3>Days till full moon: @FindDaysTillFullMoon()</h3>
<br />

<h3>Planets Visible Today:</h3>
<p>@FindVisiblePlanets()</p>
<br />

@{
    <h3>NASA Solar system RSS feed:</h3>
    <br />

    string url = "https://www.nasa.gov/rss/dyn/solar_system.rss";

    XmlReader reader = XmlReader.Create(url);
    SyndicationFeed feed = SyndicationFeed.Load(reader);
    reader.Close();

    foreach (SyndicationItem item in feed.Items)
    {
        String subject = item.Title.Text;
        String summary = item.Summary.Text;

        // @Html.LabelFor(m => item.Title.Text <br />)
        <h5>@subject</h5>
        <p>@summary</p>
    }
    <br>

    <div style="position: absolute; bottom: 5px;">
        Photo by Lubo Minar on Unsplash
    </div>
}

</div>

@code {
    public string FindDaysTillFullMoon()
    {
        DateTime today = DateTime.Now;

        // Full Moon Phase Sept 2021
        DateTime firstFullMoon = new DateTime(2021, 08, 22, 08, 22, 0);

        // Full moons are *about* every 29.5 days
        int days = today.Subtract(firstFullMoon).Days;

        var moonsAgo = days / 29.5;

        // Round up since we are looking for the next full moon
        var fullMoonsAgo = Math.Ceiling(moonsAgo);

        var nextFullMoon = firstFullMoon.AddDays(29.5 * fullMoonsAgo);
        var daysTill = nextFullMoon.Subtract(today).TotalDays;

        return Math.Floor(daysTill).ToString();

    }

    public string FindVisiblePlanets()
    {
        string filePath = Path.GetFullPath("Data\\VisiblePlanetsData.json");
        using FileStream openStream = File.OpenRead(filePath);
        DateTime today = DateTime.Today;

        VisiblePlanets[] planetDates = JsonSerializer.Deserialize<VisiblePlanets[]>(openStream);

        string todaysVisiblePlanets = "|  ";

        foreach (VisiblePlanets planet in planetDates)
        {
            planet.ParseDateTime();
            if (today.CompareTo(planet.start) > 0 && today.CompareTo(planet.end) < 0)
            {
                todaysVisiblePlanets += planet.Planet + "   |  ";
            }
        }


        return todaysVisiblePlanets;
    }
}